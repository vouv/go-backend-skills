垃圾回收
引用计数、标记清除、三色标记清除、TCMalloc

Vouv
https://github.com/vouv

# Golang GC里程碑

Golang中GC算法的发展里程碑：

- v1.1 STW
- v1.3 Mark STW, Sweep 并行
- v1.5 三色标记法
- v1.8 hybrid write barrier

.play core/raw/mgc_raw.go

# 引用计数(Reference Counting)

创建实例时给对象引用记为1，当有新增引用就把引用计数+1，释放时引用计数-1，直至引用计数减至0，该对象的内存就会被释放。

缺点

- 维护效率较低
- 无法处理循环引用的情况

.play core/raw/mgc_raw.go

# 标记清除(Mark And Sweep)

分为标记和清除两个阶段：首先STW（Stop the world），跟踪所有可达的对象并标记，完成后回收所有没有被标记的对象。

缺点

- 导致STW的问题，程序卡顿
- 标记需要扫描整个heap，效率不高
- 可能会产生大量不连续的内存碎片

.play core/raw/mgc_raw.go

# 三色标记清除

Go目前主要使用的GC算法

- 当GC第⼀次启动的时候，它把所有的对象都看成⽩⾊的，如果这个对象引⽤了另外⼀个对象，那么被引⽤的对象标记为灰⾊，加入灰色队列
- 从灰色队列取出灰⾊对象进⾏扫描，灰⾊对象取出后被标记为⿊⾊，如果它引⽤了其他对象那么这个对象标记为灰⾊并加入灰色队列，白色对象清除
- 重复第二步，扫描灰色队列

*写屏障*

写屏障表示该屏障之前的写操作与之后的写操作相比，之前的写操作先被系统其它组件感知


*本质*

实际上是把STW的时间分散了

#.html core/html/gc.html

.play core/raw/mgc_raw.go