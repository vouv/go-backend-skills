传输层
TCP、UDP

Vouv
https://github.com/vouv

# TCP

为什么可靠：校验码，序列号和确认机制

*三次握手*

作用：交换seq序列号

为什么不两次握手

- 建立连接需要双方确认序列号，如果只有两次就只确认了客户端的序号而服务端的序号没有被确定

三次握手异常丢包情况

- 第一个包丢，对服务器来说没有感知，客户端重发
- 第二个包丢，对客户端来说和第一个丢一样，但是服务端处于 SYN_RCVD 也会重发
- 第三个包丢，客户端认为连接建立发送数据，但是服务端回复 RST 包（连接异常终止）

*四次挥手*

挥手异常丢包情况

- 客户端FIN丢，服务端无感知，客户端重试一定次数后直接关闭
- 服务端第一次ACK丢，对客户端来说如无回复，重发如果收到服务端FIN，直接回复ACK并进入timewait状态
- 服务端FIN丢，服务端会重发，客户端可能在fin-wait1，或者time-wait，会回复ack给服务端
- 最后ACK丢，客户端会等待2MSL，如果服务端重发就回复，没有就关闭连接

timewait作用

- 如果服务端没有接收到ack，会重发fin
- 等待包从网络上消失

*传输策略*

nagle算法、clark算法

*拥塞控制*
TCP算法都假定超时是网络拥塞引起的，超时或收到ICMP预制包
发送方维护两个窗口，一个是接收方窗口，一个是拥塞窗口（不易获得），而发出去的数据是两个窗口的最小值
拥塞窗口
慢启动算法获得，
先发送一个最大数据段，收到后设置，
超时则获得（或达到接收方窗口大小）
阈值
初始64K
增长到阈值就线性增长
超时阈值变为拥塞窗口一半，重新开始慢启动
快恢复；重新开始的时候从阈值开始

# UDP

udp